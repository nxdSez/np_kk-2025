import React, { useEffect, useState } from "react";
import axios from "axios";
import { Line, Bar } from "react-chartjs-2";
import "chart.js/auto";
import useNpStore from "../../store/nopporn-stores"; // ‚úÖ ‡πÉ‡∏ä‡πâ Zustand ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á token ‡πÅ‡∏•‡∏∞ user

export default function Dashboard() {
  const { token, user } = useNpStore(); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞ token
  const [summary, setSummary] = useState({});
  const [daily, setDaily] = useState([]);
  const [monthly, setMonthly] = useState([]);
  const [year, setYear] = useState(new Date().getFullYear());

  // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
  const today = new Date();
  const firstDay = new Date(today.getFullYear(), today.getMonth(), 1)
    .toISOString()
    .substring(0, 10);
  const lastDay = new Date(today).toISOString().substring(0, 10);
  const [range, setRange] = useState({ from: firstDay, to: lastDay });

  const API = "http://localhost:5001/api/admin"; // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï backend ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Backend ‡∏à‡∏£‡∏¥‡∏á (Prisma ‚Üí Supabase)
  useEffect(() => {
    const headers = token ? { Authorization: `Bearer ${token}` } : {};

    const loadData = async () => {
      try {
        const [sum, day, month] = await Promise.all([
          axios.get(`${API}/sales/summary`, { params: range, headers }),
          axios.get(`${API}/sales/daily`, { params: range, headers }),
          axios.get(`${API}/sales/monthly`, { params: { year }, headers }),
        ]);

        setSummary(sum.data);
        setDaily(day.data);
        setMonthly(month.data);
      } catch (err) {
        console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
      }
    };

    if (token) {
      loadData(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ token ‡∏à‡∏£‡∏¥‡∏á
    }
  }, [range, year, token]);

  // ‚úÖ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏≤‡∏ü
  const options = {
    responsive: true,
    plugins: {
      legend: { position: "top" },
      title: { display: true, text: "‡∏Å‡∏£‡∏≤‡∏ü‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢" },
    },
  };

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin)
  if (user?.role !== "admin" && user?.role !== "employee") {
    return (
      <div className="p-6">
        <h1 className="text-2xl font-bold text-red-600">
          ‚õî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
        </h1>
        <p>‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</p>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6 bg-white rounded-lg shadow">
      <h1 className="text-2xl font-bold text-gray-700 mb-4">
        üìä ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
      </h1>

      {/* üîπ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà */}
      <div className="flex gap-4 mb-4 flex-wrap">
        <div>
          <label>‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: </label>
          <input
            type="date"
            value={range.from}
            onChange={(e) => setRange({ ...range, from: e.target.value })}
            className="border rounded p-1 ml-2"
          />
        </div>
        <div>
          <label>‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: </label>
          <input
            type="date"
            value={range.to}
            onChange={(e) => setRange({ ...range, to: e.target.value })}
            className="border rounded p-1 ml-2"
          />
        </div>
        <div>
          <label>‡∏õ‡∏µ: </label>
          <select
            className="border p-1 rounded ml-2"
            value={year}
            onChange={(e) => setYear(Number(e.target.value))}
          >
            {[2023, 2024, 2025].map((y) => (
              <option key={y}>{y}</option>
            ))}
          </select>
        </div>
      </div>

      {/* üîπ ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏° */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
        <div className="bg-blue-100 p-4 rounded shadow">
          <h2>‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°</h2>
          <p className="text-3xl font-bold text-blue-700">
            {Number(summary.totalSales || 0).toLocaleString()} ‡∏ø
          </p>
        </div>
        <div className="bg-green-100 p-4 rounded shadow">
          <h2>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h2>
          <p className="text-3xl font-bold text-green-700">
            {summary.totalOrders || 0}
          </p>
        </div>
        <div className="bg-yellow-100 p-4 rounded shadow">
          <h2>‡∏õ‡∏µ</h2>
          <p className="text-3xl font-bold text-yellow-700">{year}</p>
        </div>
      </div>

      {/* üîπ ‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô */}
      <div>
        <h2 className="font-semibold mt-4 mb-2">‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô</h2>
        <Line
          data={{
            labels: daily.map((r) => r.day),
            datasets: [
              {
                label: "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)",
                data: daily.map((r) => r.totalSales),
                borderColor: "blue",
                backgroundColor: "rgba(59,130,246,0.3)",
              },
            ],
          }}
          options={options}
        />
      </div>

      {/* üîπ ‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô */}
      <div>
        <h2 className="font-semibold mt-4 mb-2">‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h2>
        <Bar
          data={{
            labels: monthly.map((r) => r.month),
            datasets: [
              {
                label: "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)",
                data: monthly.map((r) => r.totalSales),
                backgroundColor: "orange",
              },
            ],
          }}
          options={options}
        />
      </div>
    </div>
  );
}
