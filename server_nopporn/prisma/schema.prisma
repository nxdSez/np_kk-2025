// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String?
  name      String?
  picture   String?
  role      String   @default("user")
  enable    Boolean  @default(true)
  address   String?
  orders    Order[]
  carts     Cart[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int            @id @default(autoincrement())
  title       String
  description String
  price       Float
  sold        Int            @default(0)
  quantity    Int
  orderItems  ProductOrder[]
  carItems    ProductCart[]
  images      Image[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  category    Category?      @relation(fields: [categoryId], references: [id])
  categoryId  Int?
}

model Order {
  id              Int            @id @default(autoincrement())
  cartTotal       Float
  products        ProductOrder[]
  orderStatus     String         @default("รอตรวจสอบ")
  orderedBy       User           @relation(fields: [customerId], references: [id])
  customerId      Int            @default(1)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  stripePaymentId String
  amount          Float
  status          String
}

model ProductOrder {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  count     Int
  price     Float
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cart {
  id         Int           @id @default(autoincrement())
  products   ProductCart[]
  cartTotal  Float
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  orderedBy  User          @relation(fields: [customerId], references: [id])
  customerId Int           @default(1)
}

model ProductCart {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  count     Int
  price     Float
}

model Image {
  id         Int      @id @default(autoincrement())
  asset_id   String
  public_id  String
  url        String
  secure_url String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
}
