generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String?
  role      Role     @default(user)
  name      String?
  picture   String?
  enabled   Boolean  @default(true)
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  carts     Cart[]
  orders    Order[]
}

model Product {
  id                 Int                  @id @default(autoincrement())
  title              String
  description        String
  price              Float
  sold               Int                  @default(0)
  quantity           Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  categoryId         Int?
  images             Image[]
  orderItems         OrderItem[]
  category           Category?            @relation(fields: [categoryId], references: [id])
  ProductAssociation ProductAssociation[]
  ProductAssocSource ProductAssociation[] @relation("AssocSource")
  ProductAssocTarget ProductAssociation[] @relation("AssocTarget")
  cartItems          ProductOnCart[]
}

model Order {
  id         Int         @id @default(autoincrement())
  total      Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
  customerId Int
  status     OrderStatus @default(PENDING)
  orderDate  DateTime?   @default(now())
  customer   User        @relation(fields: [customerId], references: [id])
  orderItems OrderItem[]
  payment    Payment?    @relation("OrderPayment", fields: [paymentId], references: [id])
  paymentId  String?     @unique
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  orderId     Int
  productId   Int
  productName String?
  quantity    Int
  price       Float
  counted     Boolean @default(false)
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model OrderLineLog {
  id          Int      @id @default(autoincrement())
  customerID  String
  productID   String
  productName String?
  orderID     String?
  quantity    Int?
  orderDate   DateTime
  price       Float
  frequency   Int      @default(0)
  createdAt   DateTime @default(now())

  @@index([customerID, productID], map: "customer_product_idx")
  @@index([orderID], map: "order_idx")
}

model ProductAssociation {
  id              Int      @id @default(autoincrement())
  name            String
  sourceProductId Int
  targetProductId Int
  weight          Int      @default(1)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  productId       Int?
  Product         Product? @relation(fields: [productId], references: [id])
  source          Product  @relation("AssocSource", fields: [sourceProductId], references: [id])
  target          Product  @relation("AssocTarget", fields: [targetProductId], references: [id])

  @@unique([sourceProductId, targetProductId])
  @@index([sourceProductId])
  @@index([targetProductId])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Cart {
  id         Int             @id @default(autoincrement())
  cartTotal  Float
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  customerId Int
  customer   User            @relation(fields: [customerId], references: [id])
  products   ProductOnCart[]
}

model ProductOnCart {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  count     Int
  price     Float
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Image {
  id         Int      @id @default(autoincrement())
  asset_id   String
  public_id  String
  url        String
  secure_url String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  productId  Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum Role {
  user
  admin
  employee
}

enum OrderStatus {
  PENDING
  APPROVED
  CANCELLED
}

enum PaymentMethod {
  PROMPTPAY_MANUAL
  STRIPE_CARD
}

enum PaymentStatus {
  REQUIRES_ACTION
  PENDING_REVIEW
  SUCCEEDED
  REJECTED
}

model Payment {
  id               String        @id @default(cuid())
  method           PaymentMethod
  status           PaymentStatus @default(REQUIRES_ACTION)
  amount           Int
  currency         String        @default("THB")
  slipUrl          String?
  transactionRef   String?
  promptpayPayload String?
  paidAt           DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  order            Order?        @relation("OrderPayment")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "ERD.svg" // จะได้ไฟล์ SVG ในรากโปรเจค หรือกำหนดโฟลเดอร์ก็ได้
}
